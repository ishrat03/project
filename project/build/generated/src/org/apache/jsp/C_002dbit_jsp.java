package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class C_002dbit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList<String>(1);
    _jspx_dependants.add("/signinheader.jsp");
  }

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Bit Fields in C</title>\n");
      out.write("     <style>\n");
      out.write("        .cc {\n");
      out.write("            font-size: 20px;\n");
      out.write("               float: left;\n");
      out.write("        } \n");
      out.write("        .cc ul li a{\n");
      out.write("            text-decoration: none;\n");
      out.write("            color:red;\n");
      out.write("        }\n");
      out.write("        .study{\n");
      out.write("            \n");
      out.write("            margin-left: 300px;\n");
      out.write("            background-color: wheat;\n");
      out.write("        }\n");
      out.write("        .study p{\n");
      out.write("            margin-left: 20px;\n");
      out.write("            margin-top:  20px;\n");
      out.write("            font-size: 20px;\n");
      out.write("        }\n");
      out.write("        .study h1{\n");
      out.write("            margin-left: 20px;\n");
      out.write("        }\n");
      out.write("                .pre-btn{\n");
      out.write("            border: 5px solid blueviolet;width: 100px;\n");
      out.write("            background-color: blueviolet;\n");
      out.write("            float: left;\n");
      out.write("            margin-left: 0px;\n");
      out.write("        }\n");
      out.write("        .pre-btn  a{\n");
      out.write("            color: white; \n");
      out.write("                \n");
      out.write("        }\n");
      out.write("        .nxt-btn{\n");
      out.write("         border: 5px solid blueviolet;width: 100px;\n");
      out.write("            background-color: blueviolet;\n");
      out.write("             \n");
      out.write("            margin-left: 998px;\n");
      out.write("            \n");
      out.write("        }\n");
      out.write("        .nxt-btn a{\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    </head>\n");
      out.write("    <body style=\"background-image: url(images/2.jpg);background-size: cover\">\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Header</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"signinheader.css\"/>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <div class=\"signin\">\n");
      out.write("            \n");
      out.write("                <button class=\"button\"><a href=\"useracount.jsp\">Home</a></button>\n");
      out.write("                <button class=\"button\"><a href=\"course.jsp\">Courses</a></button>\n");
      out.write("               <button> <a href=\"logout.jsp\">Logout</a></button>\n");
      out.write("        </div>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("<br/><br/><br/>\n");
      out.write("                <div class=\"cc\">\n");
      out.write("            <aside>\n");
      out.write("<ul class=\"nav nav-list primary left-menu\">\n");
      out.write("<li class=\"heading\">C Programming Tutorial</li>\n");
      out.write("<li><a href=\"C.jsp\">C - Home</a></li>\n");
      out.write("<li><a href=\"C-overview.jsp\">C - Overview</a></li>\n");
      out.write("<li><a href=\"C-environment.jsp\">C - Environment Setup</a></li>\n");
      out.write("<li><a href=\"C-structures.jsp\">C - Program Structure</a></li>\n");
      out.write("<li><a href=\"C-syntax.jsp\">C - Basic Syntax</a></li>\n");
      out.write("<li><a href=\"C-datatype.jsp\">C - Data Types</a></li>\n");
      out.write("<li><a href=\"C-variables.jsp\">C - Variables</a></li>\n");
      out.write("<li><a href=\"C-constants.jsp\">C - Constants</a></li>\n");
      out.write("<li><a href=\"C-storage.jsp\">C - Storage Classes</a></li>\n");
      out.write("<li><a href=\"operators.jsp\">C - Operators</a></li>\n");
      out.write("<li><a href=\"C-decision.jsp\">C - Decision Making</a></li>\n");
      out.write("<li><a href=\"C-loops.jsp\">C - Loops</a></li>\n");
      out.write("<li><a href=\"C-functions.jsp\">C - Functions</a></li>\n");
      out.write("<li><a href=\"C-scope.jsp\">C - Scope Rules</a></li>\n");
      out.write("<li><a href=\"C-array.jsp\">C - Arrays</a></li>\n");
      out.write("<li><a href=\"C-pointer.jsp\">C - Pointers</a></li>\n");
      out.write("<li><a href=\"C-string.jsp\">C - Strings</a></li>\n");
      out.write("<li><a href=\"C-structure.jsp\">C - Structures</a></li>\n");
      out.write("<li><a href=\"C-unions.jsp\">C - Unions</a></li>\n");
      out.write("<li><a href=\"C-bit.jsp\">C - Bit Fields</a></li>\n");
      out.write("<li><a href=\"C-typedef.jsp\">C - Typedef</a></li>\n");
      out.write("<li><a href=\"C-input.jsp\">C - Input &amp; Output</a></li>\n");
      out.write("<li><a href=\"C-file.jsp\">C - File I/O</a></li>\n");
      out.write("<li><a href=\"C-pre.jsp\">C - Preprocessors</a></li>\n");
      out.write("<li><a href=\"C-header.jsp\">C - Header Files</a></li>\n");
      out.write("<li><a href=\"C-casting.jsp\">C - Type Casting</a></li>\n");
      out.write("<li><a href=\"C-error.jsp\">C - Error Handling</a></li>\n");
      out.write("<li><a href=\"C-recursion.jsp\">C - Recursion</a></li>\n");
      out.write("<li><a href=\"C-variables.jsp\">C - Variable Arguments</a></li>\n");
      out.write("<li><a href=\"C-memory.jsp\">C - Memory Management</a></li>\n");
      out.write("<li><a href=\"C-commnand.jsp\">C - Command Line Arguments</a></li>\n");
      out.write("</ul>\n");
      out.write("\n");
      out.write("</aside>\n");
      out.write("</div>\n");
      out.write("                <div class=\"study\">\n");
      out.write("                    <center>\n");
      out.write("                        <h1>Bit Fields in C</h1>\n");
      out.write("                    </center>\n");
      out.write("    <p>Suppose your C program contains a number of TRUE/FALSE variables grouped in a structure called status, as follows &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate\">\n");
      out.write("struct {\n");
      out.write("   unsigned int widthValidated;\n");
      out.write("   unsigned int heightValidated;\n");
      out.write("} status;\n");
      out.write("</pre>\n");
      out.write("<p>This structure requires 8 bytes of memory space but in actual, we are going to store either 0 or 1 in each of the variables. The C programming language offers a better way to utilize the memory space in such situations.</p>\n");
      out.write("<p>If you are using such variables inside a structure then you can define the width of a variable which tells the C compiler that you are going to use only those number of bytes. For example, the above structure can be re-written as follows &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate\">\n");
      out.write("struct {\n");
      out.write("   unsigned int widthValidated : 1;\n");
      out.write("   unsigned int heightValidated : 1;\n");
      out.write("} status;\n");
      out.write("</pre>\n");
      out.write("<p>The above structure requires 4 bytes of memory space for status variable, but only 2 bits will be used to store the values.</p>\n");
      out.write("<p>If you will use up to 32 variables each one with a width of 1 bit, then also the status structure will use 4 bytes. However as soon as you have 33 variables, it will allocate the next slot of the memory and it will start using 8 bytes. Let us check the following example to understand the concept &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate tryit\">\n");
      out.write("#include &lt;stdio.h&gt;\n");
      out.write("#include &lt;string.h&gt;\n");
      out.write("\n");
      out.write("/* define simple structure */\n");
      out.write("struct {\n");
      out.write("   unsigned int widthValidated;\n");
      out.write("   unsigned int heightValidated;\n");
      out.write("} status1;\n");
      out.write("\n");
      out.write("/* define a structure with bit fields */\n");
      out.write("struct {\n");
      out.write("   unsigned int widthValidated : 1;\n");
      out.write("   unsigned int heightValidated : 1;\n");
      out.write("} status2;\n");
      out.write(" \n");
      out.write("int main( ) {\n");
      out.write("\n");
      out.write("   printf( \"Memory size occupied by status1 : %d\\n\", sizeof(status1));\n");
      out.write("   printf( \"Memory size occupied by status2 : %d\\n\", sizeof(status2));\n");
      out.write("\n");
      out.write("   return 0;\n");
      out.write("}\n");
      out.write("</pre>\n");
      out.write("<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("Memory size occupied by status1 : 8\n");
      out.write("Memory size occupied by status2 : 4\n");
      out.write("</pre>\n");
      out.write("<h2>Bit Field Declaration</h2>\n");
      out.write("<p>The declaration of a bit-field has the following form inside a structure &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate\">\n");
      out.write("struct {\n");
      out.write("   type [member_name] : width ;\n");
      out.write("};\n");
      out.write("</pre>\n");
      out.write("<p>The following table describes the variable elements of a bit field &minus;</p>\n");
      out.write("<table class=\"table table-bordered\">\n");
      out.write("<tr>\n");
      out.write("<th style=\"width:20%\">Elements</th>\n");
      out.write("<th>Description</th>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>type</td>\n");
      out.write("<td>An integer type that determines how a bit-field's value is interpreted. The type may be int, signed int, or unsigned int.</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>member_name</td>\n");
      out.write("<td>The name of the bit-field.</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>width</td>\n");
      out.write("<td>The number of bits in the bit-field. The width must be less than or equal to the bit width of the specified type.</td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("<p>The variables defined with a predefined width are called <b>bit fields</b>. A bit field can hold more than a single bit; for example, if you need a variable to store a value from 0 to 7, then you can define a bit field with a width of 3 bits as follows &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate\">\n");
      out.write("struct {\n");
      out.write("   unsigned int age : 3;\n");
      out.write("} Age;\n");
      out.write("</pre>\n");
      out.write("<p>The above structure definition instructs the C compiler that the age variable is going to use only 3 bits to store the value. If you try to use more than 3 bits, then it will not allow you to do so. Let us try the following example &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate tryit\">\n");
      out.write("#include &lt;stdio.h&gt;\n");
      out.write("#include &lt;string.h&gt;\n");
      out.write("\n");
      out.write("struct {\n");
      out.write("   unsigned int age : 3;\n");
      out.write("} Age;\n");
      out.write("\n");
      out.write("int main( ) {\n");
      out.write("\n");
      out.write("   Age.age = 4;\n");
      out.write("   printf( \"Sizeof( Age ) : %d\\n\", sizeof(Age) );\n");
      out.write("   printf( \"Age.age : %d\\n\", Age.age );\n");
      out.write("\n");
      out.write("   Age.age = 7;\n");
      out.write("   printf( \"Age.age : %d\\n\", Age.age );\n");
      out.write("\n");
      out.write("   Age.age = 8;\n");
      out.write("   printf( \"Age.age : %d\\n\", Age.age );\n");
      out.write("\n");
      out.write("   return 0;\n");
      out.write("}\n");
      out.write("</pre>\n");
      out.write("<p>When the above code is compiled it will compile with a warning and when executed, it produces the following result &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("Sizeof( Age ) : 4\n");
      out.write("Age.age : 4\n");
      out.write("Age.age : 7\n");
      out.write("Age.age : 0\n");
      out.write("</pre>\n");
      out.write("<hr />\n");
      out.write("\n");
      out.write("<div class=\"pre-btn\">\n");
      out.write("<a href=\"C-structure.jsp\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"nxt-btn\">\n");
      out.write("<a href=\"C-bit.jsp\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>&nbsp;</a>\n");
      out.write("</div>\n");
      out.write("<hr />\n");
      out.write("                </div>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
