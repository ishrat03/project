package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class C_002dconstants_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList<String>(1);
    _jspx_dependants.add("/signinheader.jsp");
  }

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>C - Constants</title>\n");
      out.write("     <style>\n");
      out.write("        .cc {\n");
      out.write("            font-size: 20px;\n");
      out.write("               float: left;\n");
      out.write("        } \n");
      out.write("        .cc ul li a{\n");
      out.write("            text-decoration: none;\n");
      out.write("            color:red;\n");
      out.write("        }\n");
      out.write("        .study{\n");
      out.write("            \n");
      out.write("            margin-left: 300px;\n");
      out.write("            background-color: wheat;\n");
      out.write("        }\n");
      out.write("        .study p{\n");
      out.write("            margin-left: 20px;\n");
      out.write("            margin-top:  20px;\n");
      out.write("            font-size: 20px;\n");
      out.write("        }\n");
      out.write("        .study h1{\n");
      out.write("            margin-left: 20px;\n");
      out.write("        }\n");
      out.write("                .pre-btn{\n");
      out.write("            border: 5px solid blueviolet;width: 100px;\n");
      out.write("            background-color: blueviolet;\n");
      out.write("            float: left;\n");
      out.write("            margin-left: 0px;\n");
      out.write("        }\n");
      out.write("        .pre-btn  a{\n");
      out.write("            color: white; \n");
      out.write("                \n");
      out.write("        }\n");
      out.write("        .nxt-btn{\n");
      out.write("         border: 5px solid blueviolet;width: 100px;\n");
      out.write("            background-color: blueviolet;\n");
      out.write("             \n");
      out.write("            margin-left: 998px;\n");
      out.write("            \n");
      out.write("        }\n");
      out.write("        .nxt-btn a{\n");
      out.write("            color: white;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    </head>\n");
      out.write("    <body style=\"background-image: url(images/2.jpg);background-size: cover\">\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Header</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"signinheader.css\"/>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <div class=\"signin\">\n");
      out.write("            \n");
      out.write("                <button class=\"button\"><a href=\"useracount.jsp\">Home</a></button>\n");
      out.write("                <button class=\"button\"><a href=\"course.jsp\">Courses</a></button>\n");
      out.write("               <button> <a href=\"logout.jsp\">Logout</a></button>\n");
      out.write("        </div>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("<br/><br/><br/>\n");
      out.write("                <div class=\"cc\">\n");
      out.write("            <aside>\n");
      out.write("<ul class=\"nav nav-list primary left-menu\">\n");
      out.write("<li class=\"heading\">C Programming Tutorial</li>\n");
      out.write("<li><a href=\"C.jsp\">C - Home</a></li>\n");
      out.write("<li><a href=\"C-overview.jsp\">C - Overview</a></li>\n");
      out.write("<li><a href=\"C-environment.jsp\">C - Environment Setup</a></li>\n");
      out.write("<li><a href=\"C-structure.jsp\">C - Program Structure</a></li>\n");
      out.write("<li><a href=\"C-syntax.jsp\">C - Basic Syntax</a></li>\n");
      out.write("<li><a href=\"C-datatype.jsp\">C - Data Types</a></li>\n");
      out.write("<li><a href=\"C-variables.jsp\">C - Variables</a></li>\n");
      out.write("<li><a href=\"C-constants.jsp\">C - Constants</a></li>\n");
      out.write("<li><a href=\"C-storage.jsp\">C - Storage Classes</a></li>\n");
      out.write("<li><a href=\"operators.jsp\">C - Operators</a></li>\n");
      out.write("<li><a href=\"C-decision.jsp\">C - Decision Making</a></li>\n");
      out.write("<li><a href=\"C-loops.jsp\">C - Loops</a></li>\n");
      out.write("<li><a href=\"C-functions.jsp\">C - Functions</a></li>\n");
      out.write("<li><a href=\"C-scope.jsp\">C - Scope Rules</a></li>\n");
      out.write("<li><a href=\"C-array.jsp\">C - Arrays</a></li>\n");
      out.write("<li><a href=\"C-pointer.jsp\">C - Pointers</a></li>\n");
      out.write("<li><a href=\"C-string.jsp\">C - Strings</a></li>\n");
      out.write("<li><a href=\"C-structure.jsp\">C - Structures</a></li>\n");
      out.write("<li><a href=\"C-unions.jsp\">C - Unions</a></li>\n");
      out.write("<li><a href=\"C-bit.jsp\">C - Bit Fields</a></li>\n");
      out.write("<li><a href=\"C-typedef.jsp\">C - Typedef</a></li>\n");
      out.write("<li><a href=\"C-input.jsp\">C - Input &amp; Output</a></li>\n");
      out.write("<li><a href=\"C-file.jsp\">C - File I/O</a></li>\n");
      out.write("<li><a href=\"C-pre.jsp\">C - Preprocessors</a></li>\n");
      out.write("<li><a href=\"C-header.jsp\">C - Header Files</a></li>\n");
      out.write("<li><a href=\"C-casting.jsp\">C - Type Casting</a></li>\n");
      out.write("<li><a href=\"C-error.jsp\">C - Error Handling</a></li>\n");
      out.write("<li><a href=\"C-recursion.jsp\">C - Recursion</a></li>\n");
      out.write("<li><a href=\"C-variables.jsp\">C - Variable Arguments</a></li>\n");
      out.write("<li><a href=\"C-memory.jsp\">C - Memory Management</a></li>\n");
      out.write("<li><a href=\"C-commnand.jsp\">C - Command Line Arguments</a></li>\n");
      out.write("</ul>\n");
      out.write("\n");
      out.write("</aside>\n");
      out.write("</div>\n");
      out.write("                <div class=\"study\">\n");
      out.write("                    <center><h1>C - Constants</h1></center>\n");
      out.write("      <p>Constants refer to fixed values that the program may not alter during its execution. These fixed values are also called <b>literals</b>.</p>\n");
      out.write("<p>Constants can be of any of the basic data types like <i>an integer constant, a floating constant, a character constant, or a string literal</i>. There are enumeration constants as well.</p>\n");
      out.write("<p>Constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n");
      out.write("<h2>Integer Literals</h2>\n");
      out.write("<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n");
      out.write("<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n");
      out.write("<p>Here are some examples of integer literals &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("212         /* Legal */\n");
      out.write("215u        /* Legal */\n");
      out.write("0xFeeL      /* Legal */\n");
      out.write("078         /* Illegal: 8 is not an octal digit */\n");
      out.write("032UU       /* Illegal: cannot repeat a suffix */\n");
      out.write("</pre>\n");
      out.write("<p>Following are other examples of various types of integer literals &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("85         /* decimal */\n");
      out.write("0213       /* octal */\n");
      out.write("0x4b       /* hexadecimal */\n");
      out.write("30         /* int */\n");
      out.write("30u        /* unsigned int */\n");
      out.write("30l        /* long */\n");
      out.write("30ul       /* unsigned long */\n");
      out.write("</pre>\n");
      out.write("<h2>Floating-point Literals</h2>\n");
      out.write("<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n");
      out.write("<p>While representing decimal form, you must include the decimal point, the exponent, or both; and while representing exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n");
      out.write("<p>Here are some examples of floating-point literals &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("3.14159       /* Legal */\n");
      out.write("314159E-5L    /* Legal */\n");
      out.write("510E          /* Illegal: incomplete exponent */\n");
      out.write("210f          /* Illegal: no decimal or exponent */\n");
      out.write(".e55          /* Illegal: missing integer or fraction */\n");
      out.write("</pre>\n");
      out.write("<h2>Character Constants</h2>\n");
      out.write("<p>Character literals are enclosed in single quotes, e.g., 'x' can be stored in a simple variable of <b>char</b> type.</p>\n");
      out.write("<p>A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0').</p>\n");
      out.write("<p>There are certain characters in C that represent special meaning when preceded by a backslash for example, newline (\\n) or tab (\\t).</p> \n");
      out.write("<section class=\"toggle\">\n");
      out.write("<label>Here, you have a list of such escape sequence codes &minus;</label>\n");
      out.write("<div class=\"toggle-content\">\n");
      out.write("<table class=\"table table-bordered\">\n");
      out.write("<tr>\n");
      out.write("<th style=\"width:25%\">Escape sequence</th>\n");
      out.write("<th>Meaning</th>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\\\</td>\n");
      out.write("<td>\\ character</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\'</td>\n");
      out.write("<td> ' character</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\\"</td>\n");
      out.write("<td>\" character</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\?</td>\n");
      out.write("<td>? character</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\a</td>\n");
      out.write("<td>Alert or bell</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\b</td>\n");
      out.write("<td>Backspace</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\f</td>\n");
      out.write("<td>Form feed</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\n</td>\n");
      out.write("<td>Newline</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\r</td>\n");
      out.write("<td>Carriage return</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\t</td>\n");
      out.write("<td>Horizontal tab</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\v</td>\n");
      out.write("<td>Vertical tab</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\ooo</td>\n");
      out.write("<td>Octal number of one to three digits</td>\n");
      out.write("</tr>\n");
      out.write("<tr>\n");
      out.write("<td>\\xhh . . .</td>\n");
      out.write("<td>Hexadecimal number of one or more digits</td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("</section>\n");
      out.write("<p>Following is the example to show a few escape sequence characters &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate tryit\">\n");
      out.write("#include &lt;stdio.h&gt;\n");
      out.write("\n");
      out.write("int main() {\n");
      out.write("\n");
      out.write("   printf(\"Hello\\tWorld\\n\\n\");\n");
      out.write("\n");
      out.write("   return 0;\n");
      out.write("}\n");
      out.write("</pre>\n");
      out.write("<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("Hello World\n");
      out.write("</pre>\n");
      out.write("<h2>String Literals</h2>\n");
      out.write("<p>String literals or constants are enclosed in double quotes \"\". A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n");
      out.write("<p>You can break a long line into multiple lines using string literals and separating them using white spaces.</p>\n");
      out.write("<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("\"hello, dear\"\n");
      out.write("\n");
      out.write("\"hello, \\\n");
      out.write("\n");
      out.write("dear\"\n");
      out.write("\n");
      out.write("\"hello, \" \"d\" \"ear\"\n");
      out.write("</pre>\n");
      out.write("<h2>Defining Constants</h2>\n");
      out.write("<p>There are two simple ways in C to define constants &minus;</p>\n");
      out.write("<ul class=\"list\">\n");
      out.write("<li><p>Using <b>#define</b> preprocessor.</p></li>\n");
      out.write("<li><p>Using <b>const</b> keyword.</p></li>\n");
      out.write("</ul>\n");
      out.write("<h2>The #define Preprocessor</h2>\n");
      out.write("<p>Given below is the form to use #define preprocessor to define a constant &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("#define identifier value\n");
      out.write("</pre>\n");
      out.write("<p>The following example explains it in detail &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate tryit\">\n");
      out.write("#include &lt;stdio.h&gt;\n");
      out.write("\n");
      out.write("#define LENGTH 10   \n");
      out.write("#define WIDTH  5\n");
      out.write("#define NEWLINE '\\n'\n");
      out.write("\n");
      out.write("int main() {\n");
      out.write("\n");
      out.write("   int area;  \n");
      out.write("  \n");
      out.write("   area = LENGTH * WIDTH;\n");
      out.write("   printf(\"value of area : %d\", area);\n");
      out.write("   printf(\"%c\", NEWLINE);\n");
      out.write("\n");
      out.write("   return 0;\n");
      out.write("}\n");
      out.write("</pre>\n");
      out.write("<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("value of area : 50\n");
      out.write("</pre>\n");
      out.write("<h2>The const Keyword</h2>\n");
      out.write("<p>You can use <b>const</b> prefix to declare constants with a specific type as follows &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("const type variable = value;\n");
      out.write("</pre>\n");
      out.write("<p>The following example explains it in detail &minus;</p>\n");
      out.write("<pre class=\"prettyprint notranslate tryit\">\n");
      out.write("#include &lt;stdio.h&gt;\n");
      out.write("\n");
      out.write("int main() {\n");
      out.write("\n");
      out.write("   const int  LENGTH = 10;\n");
      out.write("   const int  WIDTH = 5;\n");
      out.write("   const char NEWLINE = '\\n';\n");
      out.write("   int area;  \n");
      out.write("   \n");
      out.write("   area = LENGTH * WIDTH;\n");
      out.write("   printf(\"value of area : %d\", area);\n");
      out.write("   printf(\"%c\", NEWLINE);\n");
      out.write("\n");
      out.write("   return 0;\n");
      out.write("}\n");
      out.write("</pre>\n");
      out.write("<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n");
      out.write("<pre class=\"result notranslate\">\n");
      out.write("value of area : 50\n");
      out.write("</pre>\n");
      out.write("<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n");
      out.write("<hr />\n");
      out.write("<div class=\"pre-btn\">\n");
      out.write("<a href=\"C-variables.jsp\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"nxt-btn\">\n");
      out.write("<a href=\"C-storage.jsp\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>&nbsp;</a>\n");
      out.write("</div>\n");
      out.write("<hr />\n");
      out.write("                </div>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
